// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trgt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trgt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trgt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trgt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trgt_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trgt_2eproto;
namespace tea {
namespace analysis {
class Constraint;
struct ConstraintDefaultTypeInternal;
extern ConstraintDefaultTypeInternal _Constraint_default_instance_;
class DomInfo;
struct DomInfoDefaultTypeInternal;
extern DomInfoDefaultTypeInternal _DomInfo_default_instance_;
class DomTrgt;
struct DomTrgtDefaultTypeInternal;
extern DomTrgtDefaultTypeInternal _DomTrgt_default_instance_;
class Provenance;
struct ProvenanceDefaultTypeInternal;
extern ProvenanceDefaultTypeInternal _Provenance_default_instance_;
class RelInfo;
struct RelInfoDefaultTypeInternal;
extern RelInfoDefaultTypeInternal _RelInfo_default_instance_;
class RelTrgt;
struct RelTrgtDefaultTypeInternal;
extern RelTrgtDefaultTypeInternal _RelTrgt_default_instance_;
class Tuple;
struct TupleDefaultTypeInternal;
extern TupleDefaultTypeInternal _Tuple_default_instance_;
}  // namespace analysis
}  // namespace tea
PROTOBUF_NAMESPACE_OPEN
template<> ::tea::analysis::Constraint* Arena::CreateMaybeMessage<::tea::analysis::Constraint>(Arena*);
template<> ::tea::analysis::DomInfo* Arena::CreateMaybeMessage<::tea::analysis::DomInfo>(Arena*);
template<> ::tea::analysis::DomTrgt* Arena::CreateMaybeMessage<::tea::analysis::DomTrgt>(Arena*);
template<> ::tea::analysis::Provenance* Arena::CreateMaybeMessage<::tea::analysis::Provenance>(Arena*);
template<> ::tea::analysis::RelInfo* Arena::CreateMaybeMessage<::tea::analysis::RelInfo>(Arena*);
template<> ::tea::analysis::RelTrgt* Arena::CreateMaybeMessage<::tea::analysis::RelTrgt>(Arena*);
template<> ::tea::analysis::Tuple* Arena::CreateMaybeMessage<::tea::analysis::Tuple>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tea {
namespace analysis {

// ===================================================================

class DomInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tea.analysis.DomInfo) */ {
 public:
  inline DomInfo() : DomInfo(nullptr) {}
  ~DomInfo() override;
  explicit PROTOBUF_CONSTEXPR DomInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DomInfo(const DomInfo& from);
  DomInfo(DomInfo&& from) noexcept
    : DomInfo() {
    *this = ::std::move(from);
  }

  inline DomInfo& operator=(const DomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DomInfo& operator=(DomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DomInfo* internal_default_instance() {
    return reinterpret_cast<const DomInfo*>(
               &_DomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DomInfo& a, DomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DomInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DomInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DomInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DomInfo& from) {
    DomInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DomInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tea.analysis.DomInfo";
  }
  protected:
  explicit DomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:tea.analysis.DomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trgt_2eproto;
};
// -------------------------------------------------------------------

class RelInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tea.analysis.RelInfo) */ {
 public:
  inline RelInfo() : RelInfo(nullptr) {}
  ~RelInfo() override;
  explicit PROTOBUF_CONSTEXPR RelInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelInfo(const RelInfo& from);
  RelInfo(RelInfo&& from) noexcept
    : RelInfo() {
    *this = ::std::move(from);
  }

  inline RelInfo& operator=(const RelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelInfo& operator=(RelInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelInfo* internal_default_instance() {
    return reinterpret_cast<const RelInfo*>(
               &_RelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RelInfo& a, RelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RelInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RelInfo& from) {
    RelInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tea.analysis.RelInfo";
  }
  protected:
  explicit RelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomFieldNumber = 2,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 3,
  };
  // repeated string dom = 2;
  int dom_size() const;
  private:
  int _internal_dom_size() const;
  public:
  void clear_dom();
  const std::string& dom(int index) const;
  std::string* mutable_dom(int index);
  void set_dom(int index, const std::string& value);
  void set_dom(int index, std::string&& value);
  void set_dom(int index, const char* value);
  void set_dom(int index, const char* value, size_t size);
  std::string* add_dom();
  void add_dom(const std::string& value);
  void add_dom(std::string&& value);
  void add_dom(const char* value);
  void add_dom(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dom() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dom();
  private:
  const std::string& _internal_dom(int index) const;
  std::string* _internal_add_dom();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:tea.analysis.RelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dom_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trgt_2eproto;
};
// -------------------------------------------------------------------

class DomTrgt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tea.analysis.DomTrgt) */ {
 public:
  inline DomTrgt() : DomTrgt(nullptr) {}
  ~DomTrgt() override;
  explicit PROTOBUF_CONSTEXPR DomTrgt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DomTrgt(const DomTrgt& from);
  DomTrgt(DomTrgt&& from) noexcept
    : DomTrgt() {
    *this = ::std::move(from);
  }

  inline DomTrgt& operator=(const DomTrgt& from) {
    CopyFrom(from);
    return *this;
  }
  inline DomTrgt& operator=(DomTrgt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DomTrgt& default_instance() {
    return *internal_default_instance();
  }
  static inline const DomTrgt* internal_default_instance() {
    return reinterpret_cast<const DomTrgt*>(
               &_DomTrgt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DomTrgt& a, DomTrgt& b) {
    a.Swap(&b);
  }
  inline void Swap(DomTrgt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DomTrgt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DomTrgt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DomTrgt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DomTrgt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DomTrgt& from) {
    DomTrgt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DomTrgt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tea.analysis.DomTrgt";
  }
  protected:
  explicit DomTrgt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kInfoFieldNumber = 1,
  };
  // string location = 2;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // .tea.analysis.DomInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::tea::analysis::DomInfo& info() const;
  PROTOBUF_NODISCARD ::tea::analysis::DomInfo* release_info();
  ::tea::analysis::DomInfo* mutable_info();
  void set_allocated_info(::tea::analysis::DomInfo* info);
  private:
  const ::tea::analysis::DomInfo& _internal_info() const;
  ::tea::analysis::DomInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::tea::analysis::DomInfo* info);
  ::tea::analysis::DomInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:tea.analysis.DomTrgt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    ::tea::analysis::DomInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trgt_2eproto;
};
// -------------------------------------------------------------------

class RelTrgt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tea.analysis.RelTrgt) */ {
 public:
  inline RelTrgt() : RelTrgt(nullptr) {}
  ~RelTrgt() override;
  explicit PROTOBUF_CONSTEXPR RelTrgt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelTrgt(const RelTrgt& from);
  RelTrgt(RelTrgt&& from) noexcept
    : RelTrgt() {
    *this = ::std::move(from);
  }

  inline RelTrgt& operator=(const RelTrgt& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelTrgt& operator=(RelTrgt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelTrgt& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelTrgt* internal_default_instance() {
    return reinterpret_cast<const RelTrgt*>(
               &_RelTrgt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RelTrgt& a, RelTrgt& b) {
    a.Swap(&b);
  }
  inline void Swap(RelTrgt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelTrgt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelTrgt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelTrgt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelTrgt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RelTrgt& from) {
    RelTrgt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelTrgt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tea.analysis.RelTrgt";
  }
  protected:
  explicit RelTrgt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kInfoFieldNumber = 1,
  };
  // string location = 2;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // .tea.analysis.RelInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::tea::analysis::RelInfo& info() const;
  PROTOBUF_NODISCARD ::tea::analysis::RelInfo* release_info();
  ::tea::analysis::RelInfo* mutable_info();
  void set_allocated_info(::tea::analysis::RelInfo* info);
  private:
  const ::tea::analysis::RelInfo& _internal_info() const;
  ::tea::analysis::RelInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::tea::analysis::RelInfo* info);
  ::tea::analysis::RelInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:tea.analysis.RelTrgt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    ::tea::analysis::RelInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trgt_2eproto;
};
// -------------------------------------------------------------------

class Tuple final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tea.analysis.Tuple) */ {
 public:
  inline Tuple() : Tuple(nullptr) {}
  ~Tuple() override;
  explicit PROTOBUF_CONSTEXPR Tuple(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tuple(const Tuple& from);
  Tuple(Tuple&& from) noexcept
    : Tuple() {
    *this = ::std::move(from);
  }

  inline Tuple& operator=(const Tuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tuple& operator=(Tuple&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tuple& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tuple* internal_default_instance() {
    return reinterpret_cast<const Tuple*>(
               &_Tuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Tuple& a, Tuple& b) {
    a.Swap(&b);
  }
  inline void Swap(Tuple* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tuple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Tuple>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Tuple& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Tuple& from) {
    Tuple::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tuple* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tea.analysis.Tuple";
  }
  protected:
  explicit Tuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 2,
    kRelNameFieldNumber = 1,
  };
  // repeated string attribute = 2;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  const std::string& attribute(int index) const;
  std::string* mutable_attribute(int index);
  void set_attribute(int index, const std::string& value);
  void set_attribute(int index, std::string&& value);
  void set_attribute(int index, const char* value);
  void set_attribute(int index, const char* value, size_t size);
  std::string* add_attribute();
  void add_attribute(const std::string& value);
  void add_attribute(std::string&& value);
  void add_attribute(const char* value);
  void add_attribute(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attribute() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attribute();
  private:
  const std::string& _internal_attribute(int index) const;
  std::string* _internal_add_attribute();
  public:

  // string rel_name = 1;
  void clear_rel_name();
  const std::string& rel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rel_name();
  PROTOBUF_NODISCARD std::string* release_rel_name();
  void set_allocated_rel_name(std::string* rel_name);
  private:
  const std::string& _internal_rel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rel_name(const std::string& value);
  std::string* _internal_mutable_rel_name();
  public:

  // @@protoc_insertion_point(class_scope:tea.analysis.Tuple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attribute_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rel_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trgt_2eproto;
};
// -------------------------------------------------------------------

class Constraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tea.analysis.Constraint) */ {
 public:
  inline Constraint() : Constraint(nullptr) {}
  ~Constraint() override;
  explicit PROTOBUF_CONSTEXPR Constraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Constraint(const Constraint& from);
  Constraint(Constraint&& from) noexcept
    : Constraint() {
    *this = ::std::move(from);
  }

  inline Constraint& operator=(const Constraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Constraint& operator=(Constraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Constraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const Constraint* internal_default_instance() {
    return reinterpret_cast<const Constraint*>(
               &_Constraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Constraint& a, Constraint& b) {
    a.Swap(&b);
  }
  inline void Swap(Constraint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Constraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Constraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Constraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Constraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Constraint& from) {
    Constraint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Constraint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tea.analysis.Constraint";
  }
  protected:
  explicit Constraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyTupleFieldNumber = 2,
    kRuleInfoFieldNumber = 3,
    kHeadTupleFieldNumber = 1,
  };
  // repeated .tea.analysis.Tuple body_tuple = 2;
  int body_tuple_size() const;
  private:
  int _internal_body_tuple_size() const;
  public:
  void clear_body_tuple();
  ::tea::analysis::Tuple* mutable_body_tuple(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Tuple >*
      mutable_body_tuple();
  private:
  const ::tea::analysis::Tuple& _internal_body_tuple(int index) const;
  ::tea::analysis::Tuple* _internal_add_body_tuple();
  public:
  const ::tea::analysis::Tuple& body_tuple(int index) const;
  ::tea::analysis::Tuple* add_body_tuple();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Tuple >&
      body_tuple() const;

  // optional string rule_info = 3;
  bool has_rule_info() const;
  private:
  bool _internal_has_rule_info() const;
  public:
  void clear_rule_info();
  const std::string& rule_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rule_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rule_info();
  PROTOBUF_NODISCARD std::string* release_rule_info();
  void set_allocated_rule_info(std::string* rule_info);
  private:
  const std::string& _internal_rule_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rule_info(const std::string& value);
  std::string* _internal_mutable_rule_info();
  public:

  // .tea.analysis.Tuple head_tuple = 1;
  bool has_head_tuple() const;
  private:
  bool _internal_has_head_tuple() const;
  public:
  void clear_head_tuple();
  const ::tea::analysis::Tuple& head_tuple() const;
  PROTOBUF_NODISCARD ::tea::analysis::Tuple* release_head_tuple();
  ::tea::analysis::Tuple* mutable_head_tuple();
  void set_allocated_head_tuple(::tea::analysis::Tuple* head_tuple);
  private:
  const ::tea::analysis::Tuple& _internal_head_tuple() const;
  ::tea::analysis::Tuple* _internal_mutable_head_tuple();
  public:
  void unsafe_arena_set_allocated_head_tuple(
      ::tea::analysis::Tuple* head_tuple);
  ::tea::analysis::Tuple* unsafe_arena_release_head_tuple();

  // @@protoc_insertion_point(class_scope:tea.analysis.Constraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Tuple > body_tuple_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_info_;
    ::tea::analysis::Tuple* head_tuple_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trgt_2eproto;
};
// -------------------------------------------------------------------

class Provenance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tea.analysis.Provenance) */ {
 public:
  inline Provenance() : Provenance(nullptr) {}
  ~Provenance() override;
  explicit PROTOBUF_CONSTEXPR Provenance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Provenance(const Provenance& from);
  Provenance(Provenance&& from) noexcept
    : Provenance() {
    *this = ::std::move(from);
  }

  inline Provenance& operator=(const Provenance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Provenance& operator=(Provenance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Provenance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Provenance* internal_default_instance() {
    return reinterpret_cast<const Provenance*>(
               &_Provenance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Provenance& a, Provenance& b) {
    a.Swap(&b);
  }
  inline void Swap(Provenance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Provenance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Provenance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Provenance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Provenance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Provenance& from) {
    Provenance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Provenance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tea.analysis.Provenance";
  }
  protected:
  explicit Provenance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintFieldNumber = 2,
    kInputFieldNumber = 3,
    kOutputFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // repeated .tea.analysis.Constraint constraint = 2;
  int constraint_size() const;
  private:
  int _internal_constraint_size() const;
  public:
  void clear_constraint();
  ::tea::analysis::Constraint* mutable_constraint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Constraint >*
      mutable_constraint();
  private:
  const ::tea::analysis::Constraint& _internal_constraint(int index) const;
  ::tea::analysis::Constraint* _internal_add_constraint();
  public:
  const ::tea::analysis::Constraint& constraint(int index) const;
  ::tea::analysis::Constraint* add_constraint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Constraint >&
      constraint() const;

  // repeated .tea.analysis.Tuple input = 3;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  ::tea::analysis::Tuple* mutable_input(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Tuple >*
      mutable_input();
  private:
  const ::tea::analysis::Tuple& _internal_input(int index) const;
  ::tea::analysis::Tuple* _internal_add_input();
  public:
  const ::tea::analysis::Tuple& input(int index) const;
  ::tea::analysis::Tuple* add_input();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Tuple >&
      input() const;

  // repeated .tea.analysis.Tuple output = 4;
  int output_size() const;
  private:
  int _internal_output_size() const;
  public:
  void clear_output();
  ::tea::analysis::Tuple* mutable_output(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Tuple >*
      mutable_output();
  private:
  const ::tea::analysis::Tuple& _internal_output(int index) const;
  ::tea::analysis::Tuple* _internal_add_output();
  public:
  const ::tea::analysis::Tuple& output(int index) const;
  ::tea::analysis::Tuple* add_output();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Tuple >&
      output() const;

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:tea.analysis.Provenance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Constraint > constraint_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Tuple > input_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Tuple > output_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_trgt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DomInfo

// string name = 1;
inline void DomInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DomInfo::name() const {
  // @@protoc_insertion_point(field_get:tea.analysis.DomInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DomInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tea.analysis.DomInfo.name)
}
inline std::string* DomInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tea.analysis.DomInfo.name)
  return _s;
}
inline const std::string& DomInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DomInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DomInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DomInfo::release_name() {
  // @@protoc_insertion_point(field_release:tea.analysis.DomInfo.name)
  return _impl_.name_.Release();
}
inline void DomInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tea.analysis.DomInfo.name)
}

// optional string description = 2;
inline bool DomInfo::_internal_has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DomInfo::has_description() const {
  return _internal_has_description();
}
inline void DomInfo::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DomInfo::description() const {
  // @@protoc_insertion_point(field_get:tea.analysis.DomInfo.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DomInfo::set_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tea.analysis.DomInfo.description)
}
inline std::string* DomInfo::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:tea.analysis.DomInfo.description)
  return _s;
}
inline const std::string& DomInfo::_internal_description() const {
  return _impl_.description_.Get();
}
inline void DomInfo::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* DomInfo::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* DomInfo::release_description() {
  // @@protoc_insertion_point(field_release:tea.analysis.DomInfo.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DomInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tea.analysis.DomInfo.description)
}

// -------------------------------------------------------------------

// RelInfo

// string name = 1;
inline void RelInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RelInfo::name() const {
  // @@protoc_insertion_point(field_get:tea.analysis.RelInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RelInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tea.analysis.RelInfo.name)
}
inline std::string* RelInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tea.analysis.RelInfo.name)
  return _s;
}
inline const std::string& RelInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RelInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RelInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RelInfo::release_name() {
  // @@protoc_insertion_point(field_release:tea.analysis.RelInfo.name)
  return _impl_.name_.Release();
}
inline void RelInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tea.analysis.RelInfo.name)
}

// repeated string dom = 2;
inline int RelInfo::_internal_dom_size() const {
  return _impl_.dom_.size();
}
inline int RelInfo::dom_size() const {
  return _internal_dom_size();
}
inline void RelInfo::clear_dom() {
  _impl_.dom_.Clear();
}
inline std::string* RelInfo::add_dom() {
  std::string* _s = _internal_add_dom();
  // @@protoc_insertion_point(field_add_mutable:tea.analysis.RelInfo.dom)
  return _s;
}
inline const std::string& RelInfo::_internal_dom(int index) const {
  return _impl_.dom_.Get(index);
}
inline const std::string& RelInfo::dom(int index) const {
  // @@protoc_insertion_point(field_get:tea.analysis.RelInfo.dom)
  return _internal_dom(index);
}
inline std::string* RelInfo::mutable_dom(int index) {
  // @@protoc_insertion_point(field_mutable:tea.analysis.RelInfo.dom)
  return _impl_.dom_.Mutable(index);
}
inline void RelInfo::set_dom(int index, const std::string& value) {
  _impl_.dom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tea.analysis.RelInfo.dom)
}
inline void RelInfo::set_dom(int index, std::string&& value) {
  _impl_.dom_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tea.analysis.RelInfo.dom)
}
inline void RelInfo::set_dom(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tea.analysis.RelInfo.dom)
}
inline void RelInfo::set_dom(int index, const char* value, size_t size) {
  _impl_.dom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tea.analysis.RelInfo.dom)
}
inline std::string* RelInfo::_internal_add_dom() {
  return _impl_.dom_.Add();
}
inline void RelInfo::add_dom(const std::string& value) {
  _impl_.dom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tea.analysis.RelInfo.dom)
}
inline void RelInfo::add_dom(std::string&& value) {
  _impl_.dom_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tea.analysis.RelInfo.dom)
}
inline void RelInfo::add_dom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tea.analysis.RelInfo.dom)
}
inline void RelInfo::add_dom(const char* value, size_t size) {
  _impl_.dom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tea.analysis.RelInfo.dom)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RelInfo::dom() const {
  // @@protoc_insertion_point(field_list:tea.analysis.RelInfo.dom)
  return _impl_.dom_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RelInfo::mutable_dom() {
  // @@protoc_insertion_point(field_mutable_list:tea.analysis.RelInfo.dom)
  return &_impl_.dom_;
}

// optional string description = 3;
inline bool RelInfo::_internal_has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RelInfo::has_description() const {
  return _internal_has_description();
}
inline void RelInfo::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RelInfo::description() const {
  // @@protoc_insertion_point(field_get:tea.analysis.RelInfo.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RelInfo::set_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tea.analysis.RelInfo.description)
}
inline std::string* RelInfo::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:tea.analysis.RelInfo.description)
  return _s;
}
inline const std::string& RelInfo::_internal_description() const {
  return _impl_.description_.Get();
}
inline void RelInfo::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* RelInfo::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* RelInfo::release_description() {
  // @@protoc_insertion_point(field_release:tea.analysis.RelInfo.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RelInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tea.analysis.RelInfo.description)
}

// -------------------------------------------------------------------

// DomTrgt

// .tea.analysis.DomInfo info = 1;
inline bool DomTrgt::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool DomTrgt::has_info() const {
  return _internal_has_info();
}
inline void DomTrgt::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::tea::analysis::DomInfo& DomTrgt::_internal_info() const {
  const ::tea::analysis::DomInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::tea::analysis::DomInfo&>(
      ::tea::analysis::_DomInfo_default_instance_);
}
inline const ::tea::analysis::DomInfo& DomTrgt::info() const {
  // @@protoc_insertion_point(field_get:tea.analysis.DomTrgt.info)
  return _internal_info();
}
inline void DomTrgt::unsafe_arena_set_allocated_info(
    ::tea::analysis::DomInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tea.analysis.DomTrgt.info)
}
inline ::tea::analysis::DomInfo* DomTrgt::release_info() {
  
  ::tea::analysis::DomInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tea::analysis::DomInfo* DomTrgt::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:tea.analysis.DomTrgt.info)
  
  ::tea::analysis::DomInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::tea::analysis::DomInfo* DomTrgt::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::tea::analysis::DomInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::tea::analysis::DomInfo* DomTrgt::mutable_info() {
  ::tea::analysis::DomInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:tea.analysis.DomTrgt.info)
  return _msg;
}
inline void DomTrgt::set_allocated_info(::tea::analysis::DomInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:tea.analysis.DomTrgt.info)
}

// string location = 2;
inline void DomTrgt::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& DomTrgt::location() const {
  // @@protoc_insertion_point(field_get:tea.analysis.DomTrgt.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DomTrgt::set_location(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tea.analysis.DomTrgt.location)
}
inline std::string* DomTrgt::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:tea.analysis.DomTrgt.location)
  return _s;
}
inline const std::string& DomTrgt::_internal_location() const {
  return _impl_.location_.Get();
}
inline void DomTrgt::_internal_set_location(const std::string& value) {
  
  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* DomTrgt::_internal_mutable_location() {
  
  return _impl_.location_.Mutable(GetArenaForAllocation());
}
inline std::string* DomTrgt::release_location() {
  // @@protoc_insertion_point(field_release:tea.analysis.DomTrgt.location)
  return _impl_.location_.Release();
}
inline void DomTrgt::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  _impl_.location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tea.analysis.DomTrgt.location)
}

// -------------------------------------------------------------------

// RelTrgt

// .tea.analysis.RelInfo info = 1;
inline bool RelTrgt::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool RelTrgt::has_info() const {
  return _internal_has_info();
}
inline void RelTrgt::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::tea::analysis::RelInfo& RelTrgt::_internal_info() const {
  const ::tea::analysis::RelInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::tea::analysis::RelInfo&>(
      ::tea::analysis::_RelInfo_default_instance_);
}
inline const ::tea::analysis::RelInfo& RelTrgt::info() const {
  // @@protoc_insertion_point(field_get:tea.analysis.RelTrgt.info)
  return _internal_info();
}
inline void RelTrgt::unsafe_arena_set_allocated_info(
    ::tea::analysis::RelInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tea.analysis.RelTrgt.info)
}
inline ::tea::analysis::RelInfo* RelTrgt::release_info() {
  
  ::tea::analysis::RelInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tea::analysis::RelInfo* RelTrgt::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:tea.analysis.RelTrgt.info)
  
  ::tea::analysis::RelInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::tea::analysis::RelInfo* RelTrgt::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::tea::analysis::RelInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::tea::analysis::RelInfo* RelTrgt::mutable_info() {
  ::tea::analysis::RelInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:tea.analysis.RelTrgt.info)
  return _msg;
}
inline void RelTrgt::set_allocated_info(::tea::analysis::RelInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:tea.analysis.RelTrgt.info)
}

// string location = 2;
inline void RelTrgt::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& RelTrgt::location() const {
  // @@protoc_insertion_point(field_get:tea.analysis.RelTrgt.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RelTrgt::set_location(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tea.analysis.RelTrgt.location)
}
inline std::string* RelTrgt::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:tea.analysis.RelTrgt.location)
  return _s;
}
inline const std::string& RelTrgt::_internal_location() const {
  return _impl_.location_.Get();
}
inline void RelTrgt::_internal_set_location(const std::string& value) {
  
  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* RelTrgt::_internal_mutable_location() {
  
  return _impl_.location_.Mutable(GetArenaForAllocation());
}
inline std::string* RelTrgt::release_location() {
  // @@protoc_insertion_point(field_release:tea.analysis.RelTrgt.location)
  return _impl_.location_.Release();
}
inline void RelTrgt::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  _impl_.location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tea.analysis.RelTrgt.location)
}

// -------------------------------------------------------------------

// Tuple

// string rel_name = 1;
inline void Tuple::clear_rel_name() {
  _impl_.rel_name_.ClearToEmpty();
}
inline const std::string& Tuple::rel_name() const {
  // @@protoc_insertion_point(field_get:tea.analysis.Tuple.rel_name)
  return _internal_rel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Tuple::set_rel_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tea.analysis.Tuple.rel_name)
}
inline std::string* Tuple::mutable_rel_name() {
  std::string* _s = _internal_mutable_rel_name();
  // @@protoc_insertion_point(field_mutable:tea.analysis.Tuple.rel_name)
  return _s;
}
inline const std::string& Tuple::_internal_rel_name() const {
  return _impl_.rel_name_.Get();
}
inline void Tuple::_internal_set_rel_name(const std::string& value) {
  
  _impl_.rel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Tuple::_internal_mutable_rel_name() {
  
  return _impl_.rel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Tuple::release_rel_name() {
  // @@protoc_insertion_point(field_release:tea.analysis.Tuple.rel_name)
  return _impl_.rel_name_.Release();
}
inline void Tuple::set_allocated_rel_name(std::string* rel_name) {
  if (rel_name != nullptr) {
    
  } else {
    
  }
  _impl_.rel_name_.SetAllocated(rel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rel_name_.IsDefault()) {
    _impl_.rel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tea.analysis.Tuple.rel_name)
}

// repeated string attribute = 2;
inline int Tuple::_internal_attribute_size() const {
  return _impl_.attribute_.size();
}
inline int Tuple::attribute_size() const {
  return _internal_attribute_size();
}
inline void Tuple::clear_attribute() {
  _impl_.attribute_.Clear();
}
inline std::string* Tuple::add_attribute() {
  std::string* _s = _internal_add_attribute();
  // @@protoc_insertion_point(field_add_mutable:tea.analysis.Tuple.attribute)
  return _s;
}
inline const std::string& Tuple::_internal_attribute(int index) const {
  return _impl_.attribute_.Get(index);
}
inline const std::string& Tuple::attribute(int index) const {
  // @@protoc_insertion_point(field_get:tea.analysis.Tuple.attribute)
  return _internal_attribute(index);
}
inline std::string* Tuple::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:tea.analysis.Tuple.attribute)
  return _impl_.attribute_.Mutable(index);
}
inline void Tuple::set_attribute(int index, const std::string& value) {
  _impl_.attribute_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tea.analysis.Tuple.attribute)
}
inline void Tuple::set_attribute(int index, std::string&& value) {
  _impl_.attribute_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tea.analysis.Tuple.attribute)
}
inline void Tuple::set_attribute(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attribute_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tea.analysis.Tuple.attribute)
}
inline void Tuple::set_attribute(int index, const char* value, size_t size) {
  _impl_.attribute_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tea.analysis.Tuple.attribute)
}
inline std::string* Tuple::_internal_add_attribute() {
  return _impl_.attribute_.Add();
}
inline void Tuple::add_attribute(const std::string& value) {
  _impl_.attribute_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tea.analysis.Tuple.attribute)
}
inline void Tuple::add_attribute(std::string&& value) {
  _impl_.attribute_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tea.analysis.Tuple.attribute)
}
inline void Tuple::add_attribute(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attribute_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tea.analysis.Tuple.attribute)
}
inline void Tuple::add_attribute(const char* value, size_t size) {
  _impl_.attribute_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tea.analysis.Tuple.attribute)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Tuple::attribute() const {
  // @@protoc_insertion_point(field_list:tea.analysis.Tuple.attribute)
  return _impl_.attribute_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Tuple::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:tea.analysis.Tuple.attribute)
  return &_impl_.attribute_;
}

// -------------------------------------------------------------------

// Constraint

// .tea.analysis.Tuple head_tuple = 1;
inline bool Constraint::_internal_has_head_tuple() const {
  return this != internal_default_instance() && _impl_.head_tuple_ != nullptr;
}
inline bool Constraint::has_head_tuple() const {
  return _internal_has_head_tuple();
}
inline void Constraint::clear_head_tuple() {
  if (GetArenaForAllocation() == nullptr && _impl_.head_tuple_ != nullptr) {
    delete _impl_.head_tuple_;
  }
  _impl_.head_tuple_ = nullptr;
}
inline const ::tea::analysis::Tuple& Constraint::_internal_head_tuple() const {
  const ::tea::analysis::Tuple* p = _impl_.head_tuple_;
  return p != nullptr ? *p : reinterpret_cast<const ::tea::analysis::Tuple&>(
      ::tea::analysis::_Tuple_default_instance_);
}
inline const ::tea::analysis::Tuple& Constraint::head_tuple() const {
  // @@protoc_insertion_point(field_get:tea.analysis.Constraint.head_tuple)
  return _internal_head_tuple();
}
inline void Constraint::unsafe_arena_set_allocated_head_tuple(
    ::tea::analysis::Tuple* head_tuple) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.head_tuple_);
  }
  _impl_.head_tuple_ = head_tuple;
  if (head_tuple) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tea.analysis.Constraint.head_tuple)
}
inline ::tea::analysis::Tuple* Constraint::release_head_tuple() {
  
  ::tea::analysis::Tuple* temp = _impl_.head_tuple_;
  _impl_.head_tuple_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tea::analysis::Tuple* Constraint::unsafe_arena_release_head_tuple() {
  // @@protoc_insertion_point(field_release:tea.analysis.Constraint.head_tuple)
  
  ::tea::analysis::Tuple* temp = _impl_.head_tuple_;
  _impl_.head_tuple_ = nullptr;
  return temp;
}
inline ::tea::analysis::Tuple* Constraint::_internal_mutable_head_tuple() {
  
  if (_impl_.head_tuple_ == nullptr) {
    auto* p = CreateMaybeMessage<::tea::analysis::Tuple>(GetArenaForAllocation());
    _impl_.head_tuple_ = p;
  }
  return _impl_.head_tuple_;
}
inline ::tea::analysis::Tuple* Constraint::mutable_head_tuple() {
  ::tea::analysis::Tuple* _msg = _internal_mutable_head_tuple();
  // @@protoc_insertion_point(field_mutable:tea.analysis.Constraint.head_tuple)
  return _msg;
}
inline void Constraint::set_allocated_head_tuple(::tea::analysis::Tuple* head_tuple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.head_tuple_;
  }
  if (head_tuple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(head_tuple);
    if (message_arena != submessage_arena) {
      head_tuple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head_tuple, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.head_tuple_ = head_tuple;
  // @@protoc_insertion_point(field_set_allocated:tea.analysis.Constraint.head_tuple)
}

// repeated .tea.analysis.Tuple body_tuple = 2;
inline int Constraint::_internal_body_tuple_size() const {
  return _impl_.body_tuple_.size();
}
inline int Constraint::body_tuple_size() const {
  return _internal_body_tuple_size();
}
inline void Constraint::clear_body_tuple() {
  _impl_.body_tuple_.Clear();
}
inline ::tea::analysis::Tuple* Constraint::mutable_body_tuple(int index) {
  // @@protoc_insertion_point(field_mutable:tea.analysis.Constraint.body_tuple)
  return _impl_.body_tuple_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Tuple >*
Constraint::mutable_body_tuple() {
  // @@protoc_insertion_point(field_mutable_list:tea.analysis.Constraint.body_tuple)
  return &_impl_.body_tuple_;
}
inline const ::tea::analysis::Tuple& Constraint::_internal_body_tuple(int index) const {
  return _impl_.body_tuple_.Get(index);
}
inline const ::tea::analysis::Tuple& Constraint::body_tuple(int index) const {
  // @@protoc_insertion_point(field_get:tea.analysis.Constraint.body_tuple)
  return _internal_body_tuple(index);
}
inline ::tea::analysis::Tuple* Constraint::_internal_add_body_tuple() {
  return _impl_.body_tuple_.Add();
}
inline ::tea::analysis::Tuple* Constraint::add_body_tuple() {
  ::tea::analysis::Tuple* _add = _internal_add_body_tuple();
  // @@protoc_insertion_point(field_add:tea.analysis.Constraint.body_tuple)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Tuple >&
Constraint::body_tuple() const {
  // @@protoc_insertion_point(field_list:tea.analysis.Constraint.body_tuple)
  return _impl_.body_tuple_;
}

// optional string rule_info = 3;
inline bool Constraint::_internal_has_rule_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Constraint::has_rule_info() const {
  return _internal_has_rule_info();
}
inline void Constraint::clear_rule_info() {
  _impl_.rule_info_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Constraint::rule_info() const {
  // @@protoc_insertion_point(field_get:tea.analysis.Constraint.rule_info)
  return _internal_rule_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Constraint::set_rule_info(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.rule_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tea.analysis.Constraint.rule_info)
}
inline std::string* Constraint::mutable_rule_info() {
  std::string* _s = _internal_mutable_rule_info();
  // @@protoc_insertion_point(field_mutable:tea.analysis.Constraint.rule_info)
  return _s;
}
inline const std::string& Constraint::_internal_rule_info() const {
  return _impl_.rule_info_.Get();
}
inline void Constraint::_internal_set_rule_info(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rule_info_.Set(value, GetArenaForAllocation());
}
inline std::string* Constraint::_internal_mutable_rule_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.rule_info_.Mutable(GetArenaForAllocation());
}
inline std::string* Constraint::release_rule_info() {
  // @@protoc_insertion_point(field_release:tea.analysis.Constraint.rule_info)
  if (!_internal_has_rule_info()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.rule_info_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rule_info_.IsDefault()) {
    _impl_.rule_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Constraint::set_allocated_rule_info(std::string* rule_info) {
  if (rule_info != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rule_info_.SetAllocated(rule_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rule_info_.IsDefault()) {
    _impl_.rule_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tea.analysis.Constraint.rule_info)
}

// -------------------------------------------------------------------

// Provenance

// optional string id = 1;
inline bool Provenance::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Provenance::has_id() const {
  return _internal_has_id();
}
inline void Provenance::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Provenance::id() const {
  // @@protoc_insertion_point(field_get:tea.analysis.Provenance.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Provenance::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tea.analysis.Provenance.id)
}
inline std::string* Provenance::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:tea.analysis.Provenance.id)
  return _s;
}
inline const std::string& Provenance::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Provenance::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Provenance::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Provenance::release_id() {
  // @@protoc_insertion_point(field_release:tea.analysis.Provenance.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Provenance::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tea.analysis.Provenance.id)
}

// repeated .tea.analysis.Constraint constraint = 2;
inline int Provenance::_internal_constraint_size() const {
  return _impl_.constraint_.size();
}
inline int Provenance::constraint_size() const {
  return _internal_constraint_size();
}
inline void Provenance::clear_constraint() {
  _impl_.constraint_.Clear();
}
inline ::tea::analysis::Constraint* Provenance::mutable_constraint(int index) {
  // @@protoc_insertion_point(field_mutable:tea.analysis.Provenance.constraint)
  return _impl_.constraint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Constraint >*
Provenance::mutable_constraint() {
  // @@protoc_insertion_point(field_mutable_list:tea.analysis.Provenance.constraint)
  return &_impl_.constraint_;
}
inline const ::tea::analysis::Constraint& Provenance::_internal_constraint(int index) const {
  return _impl_.constraint_.Get(index);
}
inline const ::tea::analysis::Constraint& Provenance::constraint(int index) const {
  // @@protoc_insertion_point(field_get:tea.analysis.Provenance.constraint)
  return _internal_constraint(index);
}
inline ::tea::analysis::Constraint* Provenance::_internal_add_constraint() {
  return _impl_.constraint_.Add();
}
inline ::tea::analysis::Constraint* Provenance::add_constraint() {
  ::tea::analysis::Constraint* _add = _internal_add_constraint();
  // @@protoc_insertion_point(field_add:tea.analysis.Provenance.constraint)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Constraint >&
Provenance::constraint() const {
  // @@protoc_insertion_point(field_list:tea.analysis.Provenance.constraint)
  return _impl_.constraint_;
}

// repeated .tea.analysis.Tuple input = 3;
inline int Provenance::_internal_input_size() const {
  return _impl_.input_.size();
}
inline int Provenance::input_size() const {
  return _internal_input_size();
}
inline void Provenance::clear_input() {
  _impl_.input_.Clear();
}
inline ::tea::analysis::Tuple* Provenance::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:tea.analysis.Provenance.input)
  return _impl_.input_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Tuple >*
Provenance::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:tea.analysis.Provenance.input)
  return &_impl_.input_;
}
inline const ::tea::analysis::Tuple& Provenance::_internal_input(int index) const {
  return _impl_.input_.Get(index);
}
inline const ::tea::analysis::Tuple& Provenance::input(int index) const {
  // @@protoc_insertion_point(field_get:tea.analysis.Provenance.input)
  return _internal_input(index);
}
inline ::tea::analysis::Tuple* Provenance::_internal_add_input() {
  return _impl_.input_.Add();
}
inline ::tea::analysis::Tuple* Provenance::add_input() {
  ::tea::analysis::Tuple* _add = _internal_add_input();
  // @@protoc_insertion_point(field_add:tea.analysis.Provenance.input)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Tuple >&
Provenance::input() const {
  // @@protoc_insertion_point(field_list:tea.analysis.Provenance.input)
  return _impl_.input_;
}

// repeated .tea.analysis.Tuple output = 4;
inline int Provenance::_internal_output_size() const {
  return _impl_.output_.size();
}
inline int Provenance::output_size() const {
  return _internal_output_size();
}
inline void Provenance::clear_output() {
  _impl_.output_.Clear();
}
inline ::tea::analysis::Tuple* Provenance::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:tea.analysis.Provenance.output)
  return _impl_.output_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Tuple >*
Provenance::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:tea.analysis.Provenance.output)
  return &_impl_.output_;
}
inline const ::tea::analysis::Tuple& Provenance::_internal_output(int index) const {
  return _impl_.output_.Get(index);
}
inline const ::tea::analysis::Tuple& Provenance::output(int index) const {
  // @@protoc_insertion_point(field_get:tea.analysis.Provenance.output)
  return _internal_output(index);
}
inline ::tea::analysis::Tuple* Provenance::_internal_add_output() {
  return _impl_.output_.Add();
}
inline ::tea::analysis::Tuple* Provenance::add_output() {
  ::tea::analysis::Tuple* _add = _internal_add_output();
  // @@protoc_insertion_point(field_add:tea.analysis.Provenance.output)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tea::analysis::Tuple >&
Provenance::output() const {
  // @@protoc_insertion_point(field_list:tea.analysis.Provenance.output)
  return _impl_.output_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace analysis
}  // namespace tea

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trgt_2eproto
